#BlueJ class context
comment0.params=
comment0.target=Turtle()
comment0.text=\r\n\ A\ default\ constructor\ that\ creates\ an\ instance\ of\ the\ Turtle\ class\ with\r\n\ a\ default\ drawing\ window.\r\n\ The\ orientation\ of\ this\ turtle\ is\ 0\ degree,\ i.e.,\ facing\ East\ where\ the\ \r\n\ top\ of\ the\ screen\ is\ North.\ The\ pen\ is\ down\ with\ its\ color\ black\ and\ pen\ size\r\n\ 2\ logical\ units\ wide.\ \r\n
comment1.params=choice
comment1.target=Turtle(int)
comment1.text=\r\n\ Constructs\ a\ standard\ turtle\ with\ or\ without\ default\ drawing\ window\ assigned.\r\n\ The\ orientation\ of\ this\ turtle\ is\ 0\ degree,\ i.e.,\ facing\ East\ where\ the\ \r\n\ top\ of\ the\ screen\ is\ North.\ The\ pen\ is\ down\ with\ its\ color\ black\ and\ pen\ size\r\n\ 2\ logical\ units\ wide.\r\n\r\n\ @param\ choice\ zero\ means\ no\ default\ window;\ non-zero\ will\ create\ a\ \r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ default\ window\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \r\n
comment10.params=length
comment10.target=void\ move(double)
comment10.text=\r\n\ Moves\ this\ turtle's\ for\ a\ specified\ length.\ Positive\ length\ moves\r\n\ the\ turtle\ forward\ and\ the\ negative\ length\ moves\ the\ turtle\r\n\ backward\ relative\ to\ its\ orientation.\ The\ position\ of\r\n\ this\ turtle\ is\ set\ to\ the\ new\ location.\ The\ orientation\ remains\r\n\ the\ same.\r\n
comment11.params=targetX\ targetY
comment11.target=void\ moveTo(double,\ double)
comment11.text=\r\n\ Moves\ this\ turtle\ to\ the\ specified\ target\ (x,\ y)\ position.\r\n\ The\ turtle's\ orientation\ will\ be\ adjusted\ to\ face\ the\r\n\ the\ target\ (x,y)\ position,\ regardless\ where\ this\ turtle\r\n\ is\ facing\ before\ this\ method\ is\ called.\r\n\r\n\ @param\ targetX\ the\ x\ coordinate\ of\ the\ target\ point\r\n\ @param\ targetY\ the\ y\ coordinate\ of\ the\ target\ point\r\n\r\n
comment12.params=
comment12.target=void\ pause()
comment12.text=\r\n\ Stops\ this\ turtle\ from\ moving.\ Once\ in\ the\ pause\ mode\r\n\ this\ turtle\ needs\ to\ be\ activated\ by\ calling\ the\ start\r\n\ method.\ Otherwise\ the\ turtle\ will\ never\ move\ again.\r\n\r\n
comment13.params=color
comment13.target=void\ penColor(java.awt.Color)
comment13.text=\r\n\ Sets\ the\ color\ of\ the\ turtle's\ pen.\r\n\r\n\ @param\ color\ a\ new\ pen\ color\ for\ subsequent\ drawing\r\n
comment14.params=
comment14.target=void\ penDown()
comment14.text=\r\n\ Sets\ the\ pen\ state\ to\ down.\ Subsequent\ movement\ by\ this\ turtle\r\n\ will\ result\ in\ drawing\ the\ line.\r\n
comment15.params=penSize
comment15.target=void\ penSize(int)
comment15.text=\r\n\ Sets\ the\ size\ of\ this\ turtle's\ pen.\r\n\r\n\ @param\ penSize\ the\ new\ pen\ size\r\n\r\n
comment16.params=
comment16.target=void\ penUp()
comment16.text=\r\n\ Sets\ the\ pen\ state\ to\ up.\ Subsequent\ movement\ by\ this\ turtle\r\n\ will\ not\ result\ in\ drawing\ the\ line,\ i.e.,\ this\ turtle\ moves\ to\ a\r\n\ specified\ location\ without\ drawing.\r\n
comment17.params=message
comment17.target=void\ print(java.lang.String)
comment17.text=\r\n\ Prints\ the\ specified\ message\ at\ the\ current\ position.\ The\ color\r\n\ of\ text\ is\ fixed\ to\ black.\ You\ cannot\ change\ the\ text\ color.\r\n\ \r\n\ @param\ message\ the\ text\ to\ display\r\n
comment18.params=g
comment18.target=void\ redraw(java.awt.Graphics)
comment18.text=\r\n\ Required\ method\ to\ implement\ the\ DrawingController\ interface.\r\n\ Redraws\ the\ shape\ currently\ drawn\ by\ the\ turtle.\ This\ method\ is\r\n\ called\ from\ DrawingCanvas\ when\ the\ repaint\ method\ is\ invoked\r\n\ by\ the\ system.\ Do\ not\ call\ this\ method\ directly\ from\ your\ code.\r\n\r\n\ @param\ g\ \ the\ Graphics\ object\ where\ this\ turtle\ can\ draw\r\n
comment19.params=
comment19.target=void\ run()
comment19.text=\ \r\n\ Required\ method\ to\ implement\ the\ Runnable\ interface.\ This\ method\ is\ \r\n\ called\ eventually\ by\ the\ system,\ and\ when\ called,\ will\ execute\ the\ \r\n\ commands\ in\ the\ instruction\ buffer\ provided\ that\ this\ turtle\ is\ in\ \r\n\ the\ motion\ mode\ (i.e.\ the\ pause\ method\ is\ not\ called).\r\n
comment2.params=length
comment2.target=void\ backup(double)
comment2.text=\r\n\ Moves\ this\ turtle\ backward\ for\ a\ specified\ length.\r\n\r\n\ @param\ length\ the\ length\ to\ move\ backward\r\n
comment20.params=canvas
comment20.target=void\ setCanvas(DrawingCanvas)
comment20.text=\r\n\ Required\ method\ to\ implement\ the\ DrawingController\ interface.\r\n\ This\ method\ is\ called\ by\ a\ DrawingCanvas\ object.\r\n\ Do\ not\ call\ this\ method\ directly\ from\ your\ code.\r\n\r\n\ @param\ canvas\ the\ object\ that\ called\ this\ method\r\n
comment21.params=
comment21.target=void\ show()
comment21.text=\r\n\ Shows\ this\ turtle,\ that\ is,\ the\ turtle\ body\ is\ displayed.\r\n\r\n
comment22.params=speed
comment22.target=void\ speed(int)
comment22.text=\r\n\ Changes\ the\ speed\ of\ this\ turtle\r\n\r\n\ @param\ speed\ the\ new\ speed\ of\ this\ turtle\r\n\r\n
comment23.params=
comment23.target=void\ start()
comment23.text=\r\n\ Starts\ moving\ this\ turtle\ in\ its\ own\ thread.\r\n
comment24.params=degree
comment24.target=void\ turn(double)
comment24.text=\r\n\ Turns\ the\ turtle\ \r\n
comment25.params=orientation
comment25.target=void\ changeOrientation(double)
comment25.text=\r\n\ Sets\ the\ orientation\ of\ this\ turtle.\ \r\n\r\n\ @param\ orientation\ the\ direction\ of\ this\ turtle's\ heading\r\n\r\n
comment26.params=color
comment26.target=void\ changePenColor(java.awt.Color)
comment26.text=\r\n\ Sets\ the\ pen\ color\ to\ the\ specified\ color.\r\n\ \r\n\ @param\ color\ the\ new\ color\r\n
comment27.params=size
comment27.target=void\ changePenSize(float)
comment27.text=\r\n\ Sets\ the\ pen\ size\ to\ the\ specified\ size.\r\n\ \r\n\ @param\ size\ the\ new\ pen\ size\r\n
comment28.params=penState
comment28.target=void\ changePenState(int)
comment28.text=\r\n\ Sets\ the\ pen\ position\ of\ this\ turtle,\ true\ for\ pen\ down\ and\r\n\ false\ for\ pen\ up.\r\n\r\n\ @param\ penState\ either\ Turtle.PEN_DOWN\ or\ Turtle.PEN_UP\r\n\r\n
comment29.params=newLocation
comment29.target=void\ changePosition(Position)
comment29.text=\r\n\ Sets\ the\ current\ position\ of\ this\ turtle.\ Calling\ the\ method\ has\r\n\ the\ effect\ of\ a\ turtle\ warping\ to\ a\ new\ position\ instantaneously.\ No\r\n\ drawing\ will\ occur\ even\ if\ the\ pen\ is\ down.\r\n\r\n\ @param\ newLocation\ the\ new\ location\ of\ this\ turtle\r\n\r\n
comment3.params=color
comment3.target=void\ bodyColor(java.awt.Color)
comment3.text=\r\n\ Changes\ the\ body\ color\ of\ this\ turtle.\ You\ cannot\ change\ the\ body\r\n\ color\ while\ the\ turtle\ is\ moving.\ Basically\ you\ want\ to\ set\r\n\ the\ turtle's\ body\ color\ once.\r\n\r\n\ @param\ color\ a\ new\ body\ color\r\n\r\n
comment30.params=orientation
comment30.target=void\ changeRedrawOrientation(double)
comment30.text=\r\n\ Changes\ the\ orientation\ of\ the\ turtle\ when\ redrawing\r\n\ the\ commands\ in\ the\ 'memory'\ Vector\r\n\ \r\n\ @param\ orientation\ the\ new\ orientation\ of\ this\ turtle\r\n
comment31.params=position
comment31.target=void\ changeRedrawPosition(Position)
comment31.text=\r\n\ Changes\ the\ position\ of\ the\ turtle\ while\ commands\r\n\ in\ the\ 'memory'\ vector\ are\ being\ executed.\r\n\ \r\n\ @param\ position\ the\ new\ position\r\n
comment32.params=speed
comment32.target=void\ changeSpeed(int)
comment32.text=\r\n\ Changes\ the\ speed\ of\ this\ turtle\ to\ the\ designated\r\n\ speed.\r\n\ \r\n\ @param\ speed\ the\ new\ moving\ speed\ of\ this\ turtle\r\n
comment33.params=status
comment33.target=void\ changeVisibility(boolean)
comment33.text=\r\n\ Change\ the\ visibility\ of\ the\ Turtle\ body.\ \r\n\ \r\n\ @param\ status\ true\ to\ show\ Turtle\ body;\ false\ to\ hide\ the\ body\r\n
comment34.params=length
comment34.target=void\ draw(double)
comment34.text=\r\n\ Draws\ this\ turtle's\ trajectory\ for\ a\ specified\ length.\ Positive\ length\ \r\n\ moves\ the\ turtle\ forward\ and\ the\ negative\ length\ moves\ the\ turtle\r\n\ backward\ relative\ to\ its\ orientation.\ The\ position\ of\r\n\ this\ turtle\ is\ set\ to\ the\ new\ location.\ The\ orientation\ remains\r\n\ the\ same.\r\n
comment35.params=orientation
comment35.target=void\ drawShape(double)
comment35.text=\r\n\ Draw\ the\ turtle\ shape\ facing\ the\ given\ orientation\r\n
comment36.params=text
comment36.target=void\ drawText(java.lang.String)
comment36.text=\r\n\ Draws\ the\ specified\ text\ at\ the\ current\ position\ of\ the\r\n\ turtle.\r\n\ \r\n\ @param\ text\r\n
comment37.params=text\ position
comment37.target=void\ drawTextMemory(java.lang.String,\ Position)
comment37.text=\r\n\ Draws\ text\ specified\ by\ the\ DrawTextCommand\ command\ in\ the\ memory\r\n\ \r\n\ @param\ text\ \ \ \ \ \ \ \ the\ text\ to\ display\r\n\ @param\ position\ \ \ \ the\ position\ on\ the\ canvas\ to\ display\ the\ text\r\n
comment38.params=target\ penState\ penColor\ penSize
comment38.target=void\ plot(Position,\ int,\ java.awt.Color,\ double)
comment38.text=\r\n\ If\ the\ pen\ is\ down,\ this\ method\ calls\ the\ DrawingCanvas\ plot\ method\r\n\ to\ draw\ a\ line\ between\ redrawCurrentPosition\ to\ target\r\n\ in\ the\ specified\ color\ and\ pen\ size.\ \r\n\r\n\ @param\ target\ \ \ \ \ the\ next\ starting\ position\ for\ redrawing.\r\n\ @param\ penState\ \ \ the\ state\ of\ the\ pen\ (UP\ or\ DOWN).\r\n\ @param\ penColor\ \ \ the\ pen\ color.\r\n\ @param\ penSize\ \ \ \ the\ thickness\ of\ the\ pen.\r\n\r\n
comment39.params=degree
comment39.target=void\ rotate(double)
comment39.text=\r\n\ Turns\ this\ turtle's\ orientation\ for\ a\ specified\ degree\ in\r\n\ counter\ clockwise\ direction.\ If\ the\ specified\ degree\ is\r\n\ negative,\ then\ it\ is\ a\ clockwise\ direction\r\n\r\n\ @param\ degree\ the\ amount\ of\ degree\ this\ turtle\ rotates\ from\r\n\ the\ current\ orientation\r\n\r\n
comment4.params=point
comment4.target=void\ bodyShape(java.awt.Point[])
comment4.text=\r\n\ Sets\ the\ shape\ of\ this\ turtle\ to\ the\ give\ shape\r\n\ expressed\ in\ an\ array\ of\ Point\ objects.\ The\ shape\r\n\ can\ be\ any\ polygon.\ You\ cannot\ change\ the\ body\r\n\ shape\ while\ the\ turtle\ is\ moving.\ Basically\ you\ want\ to\ set\r\n\ the\ turtle's\ body\ shape\ once.\r\n\r\n\ @param\ point\ \ an\ array\ of\ Point\ objects\ representing\ a\ polygon\r\n\r\n
comment40.params=target
comment40.target=void\ turnAndMove(Position)
comment40.text=\r\n\ Implements\ the\ MoveTo\ command\ by\ using\ the\ changeOrientation\r\n\ and\ draw\ methods.\r\n\r\n\ @param\ target\ a\ target\ position\ this\ turtle\ moves\ to\r\n\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ from\ its\ current\ position.\r\n
comment41.params=
comment41.target=void\ initMemory()
comment41.text=\r\n\ Clears\ this\ turtle's\ memory.\r\n
comment42.params=
comment42.target=void\ reset()
comment42.text=\r\n\ Resets\ this\ turtle\ to\ it's\ initial\ state\r\n
comment43.params=
comment43.target=void\ startRunning()
comment43.text=\r\n\ Starts\ this\ turtle\ running\ in\ its\ own\ thread.\r\n\r\n
comment5.params=length
comment5.target=void\ forward(double)
comment5.text=\r\n\ Moves\ this\ turtle\ forward\ for\ a\ given\ length.\ This\ method\ is\ \r\n\ the\ same\ as\ the\ move\ method\ with\ a\ positive\ argument.\r\n\r\n\ @param\ length\ the\ length\ to\ move\ forward\r\n
comment6.params=degree
comment6.target=void\ heading(double)
comment6.text=\r\n\ Sets\ this\ turtle's\ heading\ for\ a\ specified\ degree.\ The\ current\r\n\ heading\ is\ irrelevant.\ If\ the\ specified\ degree\ is\r\n\ negative,\ then\ it\ is\ a\ clockwise\ direction\r\n\r\n\ @param\ degree\ the\ new\ orientation\ of\ this\ turtle\r\n\r\n
comment7.params=
comment7.target=void\ hide()
comment7.text=\r\n\ Hides\ this\ turtle,\ that\ is,\ the\ turtle\ body\ is\ not\ displayed..\r\n\r\n
comment8.params=
comment8.target=void\ init()
comment8.text=\r\n\ Initializes\ this\ turtle.\ When\ a\ turtle\ is\ first\ created,\ it\r\n\ is\ initialized\ automatically.\ The\ user\ needs\ to\ call\ this\ method\r\n\ explicitly,\ when\ a\ new\ drawing\ is\ required\ by\ the\ same\ turtle.\r\n
comment9.params=x\ y
comment9.target=void\ jumpTo(double,\ double)
comment9.text=\r\n\ Jumps\ to\ the\ given\ (x,\ y).\ This\ is\ a\ warp\ jump\ so\ no\ drawing\ will\r\n\ take\ place,\ even\ when\ the\ pen\ is\ down.\ \r\n\r\n\ @param\ x\ the\ x\ coordinate\ of\ the\ target\ position\r\n\ @param\ y\ the\ y\ coordinate\ of\ the\ target\ position\r\n
numComments=44
